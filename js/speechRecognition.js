class SpeechRecognitionHandler {
    constructor() {
        // Note: Azure Speech API can be used for server-side speech recognition
        // with better accuracy for Vietnamese. Currently using Web Speech API
        // for client-side recognition.
        if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
            this.showError('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i');
            return;
        }

        this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
        this.recognition.lang = 'vi-VN';
        this.recognition.continuous = true;
        this.recognition.interimResults = true;
        this.recognition.maxAlternatives = 3;
        
        this.isRecording = false;
        this.restartTimeout = null;
        this.noSpeechTimeout = null;
        this.pauseDetectionTimeout = null;
        this.previousText = '';
        this.clearDisplayTimeout = null;
        this.continuousSpeechTimeout = null;
        this.lastResultTime = Date.now();
        this.continuousSpeechDuration = 0;
        this.isContinuousSpeech = false;
        
        this.setupRecognition();
        this.startRecording(); // T·ª± ƒë·ªông b·∫≠t micro khi kh·ªüi t·∫°o
    }

    setupRecognition() {
        this.recognition.onstart = () => {
            this.updateStatus('ƒêang nghe.................');
            this.setRecordingState(true);
            this.startNoSpeechTimer();
        };

        this.recognition.onresult = (event) => {
            this.resetNoSpeechTimer();
            
            // C·∫≠p nh·∫≠t th·ªùi gian nh·∫≠n k·∫øt qu·∫£
            const currentTime = Date.now();
            const timeSinceLastResult = currentTime - this.lastResultTime;
            this.lastResultTime = currentTime;
            
            // Ki·ªÉm tra xem ƒëang n√≥i li√™n t·ª•c hay kh√¥ng
            if (timeSinceLastResult < 300) { // N·∫øu c√°c k·∫øt qu·∫£ ƒë·∫øn li√™n t·ª•c (kho·∫£ng c√°ch < 300ms)
                this.continuousSpeechDuration += timeSinceLastResult;
                if (this.continuousSpeechDuration > 5000 && !this.isContinuousSpeech) { // N·∫øu n√≥i li√™n t·ª•c > 5 gi√¢y
                    console.log('üîÑ Ph√°t hi·ªán n√≥i li√™n t·ª•c');
                    this.isContinuousSpeech = true;
                    this.updateStatus('ƒêang n√≥i li√™n t·ª•c...');
                }
            } else {
                // ƒê√£ c√≥ kho·∫£ng d·ª´ng
                this.continuousSpeechDuration = 0;
                if (this.isContinuousSpeech) {
                    this.isContinuousSpeech = false;
                    this.updateStatus('ƒêang nghe.......');
                }
            }
            
            let interimTranscript = '';
            let finalTranscript = '';

            for (let i = event.resultIndex; i < event.results.length; i++) {
                const result = event.results[i];
                const transcript = result[0].transcript;
                const confidence = result[0].confidence;
                
                if (confidence < 0.5) {
                    console.log('‚ö†Ô∏è B·ªè qua k·∫øt qu·∫£ ƒë·ªô tin c·∫≠y th·∫•p:', transcript);
                    continue;
                }

                if (result.isFinal) {
                    finalTranscript = this.improveVietnameseText(transcript);
                    console.log('‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:', finalTranscript);
                    console.log('üìä ƒê·ªô ch√≠nh x√°c:', Math.round(confidence * 100) + '%');
                    translator.translateText(finalTranscript);
                    this.detectVoicePause(true);
                } else {
                    interimTranscript = this.improveVietnameseText(transcript);
                    console.log('üîÑ ƒêang nh·∫≠n di·ªán:', interimTranscript);
                    
                    // Ki·ªÉm tra n·∫øu c√≥ thay ƒë·ªïi l·ªõn gi·ªØa text tr∆∞·ªõc v√† text hi·ªán t·∫°i
                    // Ch·ªâ x√≥a khi kh√¥ng ph·∫£i ƒëang n√≥i li√™n t·ª•c
                    if (!this.isContinuousSpeech && this.isNewSentenceStarting(this.previousText, interimTranscript)) {
                        // N·∫øu c√≥ text m·ªõi ho√†n to√†n kh√°c, c√≥ th·ªÉ l√† c√¢u m·ªõi b·∫Øt ƒë·∫ßu
                        console.log('üÜï Ph√°t hi·ªán c√¢u m·ªõi b·∫Øt ƒë·∫ßu');
                        translator.clearDisplay(); // X√≥a text c≈©
                    }
                    
                    this.previousText = interimTranscript;
                    translator.translateText(interimTranscript, true);
                    this.detectVoicePause();
                }
            }
        };

        this.recognition.onerror = (event) => {
            console.error('‚ùå L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i:', event.error);
            this.handleError(event.error);
        };

        this.recognition.onend = () => {
            console.log('üõë K·∫øt th√∫c phi√™n ghi √¢m 1.5 gi√¢y');
            clearTimeout(this.noSpeechTimeout);
            clearTimeout(this.pauseDetectionTimeout);
            clearTimeout(this.continuousSpeechTimeout);
            
            if (this.isRecording) {
                console.log('üîÑ T·ª± ƒë·ªông kh·ªüi ƒë·ªông l·∫°i...');
                this.restartTimeout = setTimeout(() => {
                    this.recognition.start();
                }, 300);
            }
        };
    }

    isNewSentenceStarting(prevText, currentText) {
        // N·∫øu kh√¥ng c√≥ text tr∆∞·ªõc ƒë√≥, kh√¥ng ph·∫£i c√¢u m·ªõi
        if (!prevText) return false;
        
        // N·∫øu ƒë·ªô d√†i text hi·ªán t·∫°i ng·∫Øn h∆°n nhi·ªÅu so v·ªõi text tr∆∞·ªõc ƒë√≥
        // ho·∫∑c b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† kh√°c ho√†n to√†n, c√≥ th·ªÉ l√† c√¢u m·ªõi
        if (currentText.length < prevText.length * 0.7) {
            return true;
        }
        
        // Ki·ªÉm tra xem c√≥ d·∫•u hi·ªáu c·ªßa c√¢u m·ªõi kh√¥ng (ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa v√† c·∫•u tr√∫c kh√°c)
        const firstWord = currentText.split(' ')[0];
        const prevFirstWord = prevText.split(' ')[0];
        
        if (firstWord !== prevFirstWord && 
            firstWord.charAt(0) === firstWord.charAt(0).toUpperCase() &&
            firstWord.length > 1) {
            return true;
        }
        
        return false;
    }

    detectVoicePause(isFinal = false) {
        // H·ªßy timeout tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        clearTimeout(this.pauseDetectionTimeout);
        
        // N·∫øu l√† k·∫øt qu·∫£ cu·ªëi c√πng, kh√¥ng c·∫ßn thi·∫øt l·∫≠p timeout m·ªõi
        if (isFinal) return;
        
        // Thi·∫øt l·∫≠p timeout m·ªõi ƒë·ªÉ ph√°t hi·ªán t·∫°m d·ª´ng gi·ªçng n√≥i
        // Trong tr∆∞·ªùng h·ª£p n√≥i li√™n t·ª•c, s·ª≠ d·ª•ng ng∆∞·ª°ng cao h∆°n
        const pauseThreshold = this.isContinuousSpeech ? 1000 : 800; // 1s cho n√≥i li√™n t·ª•c, 0.8s cho n√≥i th∆∞·ªùng
        
        this.pauseDetectionTimeout = setTimeout(() => {
            console.log('‚è∏Ô∏è Ph√°t hi·ªán t·∫°m d·ª´ng gi·ªçng n√≥i');
            this.setupClearDisplayTimeout();
        }, pauseThreshold);
    }
    
    setupClearDisplayTimeout() {
        // H·ªßy timeout tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        clearTimeout(this.clearDisplayTimeout);
        
        // Thi·∫øt l·∫≠p timeout m·ªõi ƒë·ªÉ x√≥a m√†n h√¨nh sau 5 gi√¢y kh√¥ng c√≥ ho·∫°t ƒë·ªông gi·ªçng n√≥i
        // Kh√¥ng x√≥a trong tr∆∞·ªùng h·ª£p n√≥i li√™n t·ª•c
        if (!this.isContinuousSpeech) {
            this.clearDisplayTimeout = setTimeout(() => {
                console.log('üßπ X√≥a m√†n h√¨nh sau kho·∫£ng th·ªùi gian im l·∫∑ng');
                translator.clearDisplay();
            }, 5000); // 5 gi√¢y
        }
    }

    handleError(error) {
        switch (error) {
            case 'not-allowed':
                this.showError('Vui l√≤ng c·∫•p quy·ªÅn truy c·∫≠p microphone');
                break;
            case 'audio-capture':
                this.showError('Kh√¥ng t√¨m th·∫•y microphone');
                break;
            case 'no-speech':
                this.updateStatus('Kh√¥ng nghe, ƒëang th·ª≠ l·∫°i...');
                this.restartRecording();
                break;
            default:
                this.showError('ƒê√£ x·∫£y ra l·ªói, ƒëang th·ª≠ l·∫°i...');
                this.restartRecording();
        }
    }

    showError(message) {
        const statusIndicator = document.querySelector('.status-indicator');
        const statusText = document.getElementById('statusText');
        
        statusIndicator.classList.add('error');
        statusText.textContent = message;
        
        setTimeout(() => {
            statusIndicator.classList.remove('error');
            this.updateStatus('ƒêang nghe.......');
        }, 3000);
    }

    updateStatus(message) {
        const statusText = document.getElementById('statusText');
        statusText.textContent = message;
    }

    setRecordingState(isRecording) {
        const statusIndicator = document.querySelector('.status-indicator');
        if (isRecording) {
            statusIndicator.classList.add('recording');
        } else {
            statusIndicator.classList.remove('recording');
        }
    }

    improveVietnameseText(text) {
        return text.trim()
            .replace(/\s+/g, ' ')
            .replace(/\.+/g, '.')
            .replace(/\?+/g, '?')
            .replace(/\!+/g, '!')
            .replace(/(^|[.!?]\s+)([a-z√†√°·∫°·∫£√£√¢·∫ß·∫•·∫≠·∫©·∫´ƒÉ·∫±·∫Ø·∫∑·∫≥·∫µ√®√©·∫π·∫ª·∫Ω√™·ªÅ·∫ø·ªá·ªÉ·ªÖ√¨√≠·ªã·ªâƒ©√≤√≥·ªç·ªè√µ√¥·ªì·ªë·ªô·ªï·ªó∆°·ªù·ªõ·ª£·ªü·ª°√π√∫·ª•·ªß≈©∆∞·ª´·ª©·ª±·ª≠·ªØ·ª≥√Ω·ªµ·ª∑·ªπƒë])/g, 
                (match, p1, p2) => p1 + p2.toUpperCase()
            );
    }

    startNoSpeechTimer() {
        clearTimeout(this.noSpeechTimeout);
        this.noSpeechTimeout = setTimeout(() => {
            this.updateStatus('Kh√¥ng nghe, th·ª≠ l·∫°i...');
            this.restartRecording();
        }, 1000); // Thay ƒë·ªïi t·ª´ 10000ms xu·ªëng 1500ms (1.5 gi√¢y)
    }

    resetNoSpeechTimer() {
        clearTimeout(this.noSpeechTimeout);
        this.startNoSpeechTimer();
    }

    restartRecording() {
        if (this.isRecording) {
            this.recognition.stop();
            setTimeout(() => {
                this.recognition.start();
            }, 500);
        }
    }

    startRecording() {
        try {
            this.isRecording = true;
            this.recognition.start();
            console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu ghi √¢m');
        } catch (error) {
            console.error('‚ùå L·ªói khi b·∫Øt ƒë·∫ßu ghi √¢m:', error);
            this.handleStartError();
        }
    }

    handleStartError() {
        this.showError('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ghi √¢m, ƒëang th·ª≠ l·∫°i...');
        setTimeout(() => {
            this.startRecording();
        }, 1000);
    }
}

// Kh·ªüi t·∫°o ngay khi trang web load xong
document.addEventListener('DOMContentLoaded', () => {
    const speechRecognition = new SpeechRecognitionHandler();
}); 